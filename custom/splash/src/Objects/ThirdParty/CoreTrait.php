<?php

/*
 *  This file is part of SplashSync Project.
 *
 *  Copyright (C) 2015-2021 Splash Sync  <www.splashsync.com>
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code.
 */

namespace Splash\Local\Objects\ThirdParty;

use Splash\Core\SplashCore      as Splash;

/**
 * Dolibarr ThirdParty Core Fields (Required)
 */
trait CoreTrait
{
    /**
     * @var string
     */
    private $firstname;

    /**
     * @var string
     */
    private $lastname;

    /**
     * @var string
     */
    private $name;

    /**
     * Build Core Fields using FieldFactory
     *
     * @return void
     */
    protected function buildCoreFields()
    {
        global $langs,$conf;

        //====================================================================//
        // Company
        $this->fieldsFactory()->create(SPL_T_VARCHAR)
            ->Identifier("name")
            ->Name($langs->trans("CompanyName"))
            ->isLogged()
            ->Description($langs->trans("CompanyName"))
            ->MicroData("http://schema.org/Organization", "legalName")
            ->isRequired()
            ->isListed();

        //====================================================================//
        // Firstname
        $this->fieldsFactory()->create(SPL_T_VARCHAR)
            ->Identifier("firstname")
            ->Name($langs->trans("Firstname"))
            ->isLogged()
            ->MicroData("http://schema.org/Person", "familyName")
            ->Association("firstname", "lastname");

        //====================================================================//
        // Lastname
        $this->fieldsFactory()->create(SPL_T_VARCHAR)
            ->Identifier("lastname")
            ->Name($langs->trans("Lastname"))
            ->isLogged()
            ->MicroData("http://schema.org/Person", "givenName")
            ->Association("firstname", "lastname");

        //====================================================================//
        // Reference
        $this->fieldsFactory()->create(SPL_T_VARCHAR)
            ->Identifier("code_client")
            ->Name($langs->trans("CustomerCode"))
            ->Description($langs->trans("CustomerCodeDesc"))
            ->isListed()
            ->MicroData("http://schema.org/Organization", "alternateName");
        //====================================================================//
        // Set as Read Only when Auto-Generated by Dolibarr
        if ("mod_codeproduct_leopard" != $conf->global->SOCIETE_CODECLIENT_ADDON) {
            $this->fieldsFactory()->isReadOnly();
        }
    }

    /**
     * Read requested Field
     *
     * @param string $key       Input List Key
     * @param string $fieldName Field Identifier / Name
     *
     * @return void
     */
    protected function getCoreFields($key, $fieldName)
    {
        //====================================================================//
        // Read Company FullName => Firstname, Lastname - Compagny
        $fullname = $this->decodeFullName($this->object->name);

        //====================================================================//
        // READ Fields
        switch ($fieldName) {
            //====================================================================//
            // Fullname Readings
            case 'name':
            case 'firstname':
            case 'lastname':
                $this->out[$fieldName] = isset($fullname[$fieldName])
                    ? $fullname[$fieldName]
                    : null;

                break;
            //====================================================================//
            // Direct Readings
            case 'code_client':
                $this->getSimple($fieldName);

                break;
            default:
                return;
        }

        unset($this->in[$key]);
    }

    /**
     * Write Given Fields
     *
     * @param string $fieldName Field Identifier / Name
     * @param mixed  $fieldData Field Data
     *
     * @return void
     */
    protected function setCoreFields($fieldName, $fieldData)
    {
        //====================================================================//
        // WRITE Field
        switch ($fieldName) {
            //====================================================================//
            // Fullname Writtings
            case 'name':
            case 'firstname':
            case 'lastname':
                $this->{$fieldName} = $fieldData;

                break;
            //====================================================================//
            // Direct Writtings
            case 'code_client':
                $this->setSimple($fieldName, $fieldData);

                break;
            default:
                return;
        }
        unset($this->in[$fieldName]);
    }

    /**
     * Check FullName Array and update if needed
     *
     * @return void
     */
    protected function updateFullName()
    {
        //====================================================================//
        // Stack Trace
        Splash::log()->trace();
        //====================================================================//
        // Get Current Values if Not Written
        $currentName = $this->decodeFullName($this->object->name);
        if (empty($this->firstname) && !empty($currentName["firstname"])) {
            $this->firstname = $currentName["firstname"];
        }
        if (empty($this->lastname) && !empty($currentName["lastname"])) {
            $this->lastname = $currentName["lastname"];
        }
        if (empty($this->name) && !empty($currentName["name"])) {
            $this->name = $currentName["name"];
        }
        //====================================================================//
        // No First or Last Name
        if (empty(trim($this->firstname)) && empty(trim($this->lastname))) {
            $this->setSimple("name", $this->name);

            return;
        }
        //====================================================================//
        // Encode Full Name String
        $encodedFullName = $this->encodeFullName($this->firstname, $this->lastname, $this->name);
        $this->setSimple("name", $encodedFullName);
    }

    //====================================================================//
    // Class Tooling Functions
    //====================================================================//

    /**
     * Encode Full Name String using Firstname, Lastname & Compagny Name
     *
     * @param string $firstname Contact Firstname
     * @param string $lastname  Contact Lasttname
     * @param string $company   Contact Company
     *
     * @return string Contact Full Name
     */
    private static function encodeFullName($firstname, $lastname, $company = "")
    {
        //====================================================================//
        // Clean Input Data
        $fullName = (string) preg_replace('/[-,]/', '', trim($firstname));
        $last = preg_replace('/[-,]/', '', trim($lastname));
        $comp = preg_replace('/[-,]/', '', trim($company));
        //====================================================================//
        // Encode Full Name
        if (!empty($last)) {
            $fullName .= ", ".$last;
        }
        if (!empty($comp)) {
            $fullName .= " - ".$comp;
        }

        return $fullName;
    }

    /**
     * Decode Firstname, Lastname & Compagny Name using Full Name String
     *
     * @param string $fullName Contact Full Name
     *
     * @return null|array Contact Firstname, Lastname & Compagny Name
     */
    private static function decodeFullName($fullName = null)
    {
        //====================================================================//
        // Safety Checks
        if (empty($fullName)) {
            return null;
        }

        //====================================================================//
        // Init
        $result = array('name' => "", 'lastname' => "",'firstname' => ""  );

        //====================================================================//
        // Detect Single Company Name
        if ((false == strpos($fullName, ' - ')) && (false == strpos($fullName, ', '))) {
            $result['name'] = $fullName;

            return $result;
        }
        //====================================================================//
        // Detect Company Name
        if (false != ($pos = strpos($fullName, ' - '))) {
            $result['name'] = substr($fullName, $pos + 3);
            $fullName = substr($fullName, 0, $pos);
        }
        //====================================================================//
        // Detect Last Name
        if (false != ($pos = strpos($fullName, ', '))) {
            $result['lastname'] = substr($fullName, $pos + 2);
            $fullName = substr($fullName, 0, $pos);
        }
        $result['firstname'] = $fullName;

        return $result;
    }
}
